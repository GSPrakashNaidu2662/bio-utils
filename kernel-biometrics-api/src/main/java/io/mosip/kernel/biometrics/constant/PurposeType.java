//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.05.13 at 03:22:53 PM IST 
//

package io.mosip.kernel.biometrics.constant;

/**
 * Enumerates the different purposes for which a biometric sample might be used.
 *
 * This JAXB-generated enum represents the "PurposeType" element found in an XML schema. It defines the various reasons
 * why a biometric sample might be captured or used in a biometric system, such as verification, identification, enrollment,
 * or auditing.
 *
 */

import java.io.Serializable;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;

@XmlType(name = "PurposeType")
@XmlEnum
public enum PurposeType implements Serializable {
	/**
	 * Verification: Comparing a biometric sample to a registered template for
	 * authentication.
	 */
	@XmlEnumValue("Verify")
	VERIFY("Verify"),

	/**
	 * Identification: Identifying an individual from a database using a biometric
	 * sample.
	 */
	@XmlEnumValue("Identify")
	IDENTIFY("Identify"),

	/**
	 * Enrollment: Capturing a biometric sample and registering it for future use.
	 */
	@XmlEnumValue("Enroll")
	ENROLL("Enroll"),

	/**
	 * Enroll and Verify: Performing enrollment followed by immediate verification
	 * of the enrolled sample.
	 */
	@XmlEnumValue("EnrollVerify")
	ENROLLVERIFY("EnrollVerify"),

	/**
	 * Enroll and Identify: Performing enrollment followed by identification using
	 * the enrolled sample.
	 */
	@XmlEnumValue("EnrollIdentify")
	ENROLLIDENTIFY("EnrollIdentify"),

	/**
	 * Audit: Using a biometric sample for auditing purposes (e.g.,
	 * non-repudiation).
	 */
	@XmlEnumValue("Audit")
	AUDIT("Audit");

	private final String value;

	PurposeType(String v) {
		value = v;
	}

	public String value() {
		return value;
	}

	public static PurposeType fromValue(String v) {
		for (PurposeType c : PurposeType.values()) {
			if (c.value.equalsIgnoreCase(v)) {
				return c;
			}
		}
		throw new IllegalArgumentException(v);
	}

}
